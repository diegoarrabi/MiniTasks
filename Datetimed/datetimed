#!/usr/bin/python3

from datetime import datetime
import subprocess

def main():
    outputVar = copy2Clip(getTime())
    print(outputVar)
    
    
def getTime() -> str:
        my_today = datetime.today()
        tdDay = my_today.day
        tdMonth = my_today.month
        tdHour = my_today.hour
        tdMin = my_today.minute
        timeList = [tdMonth, tdDay, tdHour, tdMin]
        return padNum(timeList)
    
def padNum(var: list) -> str:
    for i in range(len(var)):
        timeVar = str(var[i])
        if len(timeVar) < 2:
            timeVar = "0" + timeVar
        var[i] = timeVar
    return comboTime(var)

def comboTime(var: list) -> str:
    timeStr = ""
    for i in range(len(var)):
        if i == 2:
            timeStr = timeStr + '_' + var[i]
        else:
            timeStr = timeStr + var[i]
    return timeStr

def copy2Clip(strVar: str) -> str:
    subprocess.run("pbcopy", text=True, input=strVar)
    return strVar


if __name__ == '__main__':
    main()

"""
def timeLabel(prefix="") -> str:
    '''
    Returns time string as *HHMMSS
    accepting a prefix represented by the asterisk

    Args:
        prefix (str, optional): Any string to precede the time. Defaults to "".

    Returns:
        str: "052501"
    '''

    def getTime() -> list[str]:
        current_hour = datetime.today().hour
        current_min = datetime.today().minute
        current_sec = datetime.today().second
        current_list = [current_hour, current_min, current_sec]
        return padNumbers(current_list)

    def padNumbers(raw_time: list[int]) -> list[str]:
        for i in range(len(raw_time)):
            time_component = str(raw_time[i])
            if len(time_component) < 2:
                time_component = "0" + time_component
            raw_time[i] = time_component
        return raw_time
    
    return f'{prefix}{''.join(getTime())}'
"""